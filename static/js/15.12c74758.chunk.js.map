{"version":3,"sources":["nft/utils/roundAndPluralize.ts","nft/utils/x2y2.ts","nft/utils/listNfts.ts","nft/components/sell/modal/ListingSection.tsx","nft/components/sell/modal/ListingModal.tsx"],"names":["roundAndPluralize","i","word","rounded","Math","floor","pluralize","number","orderItemParamType","orderParamTypes","orderParamType","signOrderData","web3Provider","order","a","orderData","defaultAbiCoder","encode","salt","user","network","intent","delegateType","deadline","currency","dataMask","items","length","orderHash","keccak256","send","orderSig","r","slice","s","v","parseInt","fixSignature","data","encodeOrder","createSellOrder","randomHex","BigNumber","from","randomBytes","toHexString","hexZeroPad","randomSalt","AddressZero","map","item","price","tokens","signVersion","ListingMarkets","name","fee","icon","createConsiderationItem","basisPoints","recipient","amount","getConsiderationItems","asset","signerAddress","openSeaBasisPoints","OPENSEA_DEFAULT_FEE","INVERSE_BASIS_POINTS","creatorFeeBasisPoints","creatorPercentage","sellerBasisPoints","openseaFee","mul","div","toString","creatorFee","sellerFee","OPENSEA_FEE_ADDRESS","asset_contract","payout_address","undefined","approveCollection","operator","collectionAddress","signer","setStatus","ERC721Contract","Contract","ERC721","getAddress","ListingStatus","PENDING","isApprovedForAll","APPROVED","SIGNING","setApprovalForAll","approvalTransaction","wait","status","FAILED","code","REJECTED","signListing","marketplace","provider","looksRareNonce","seaport","Seaport","conduitKeyToConduit","OPENSEA_KEY_TO_CONDUIT","overrides","defaultConduitKey","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","listingPrice","newListings","find","listing","expirationTime","listingInWei","parseEther","considerationItems","filter","createOrder","offer","itemType","ItemType","token","address","identifier","tokenId","consideration","endTime","zone","OPENSEA_DEFAULT_ZONE","restrictedByZone","allowPartialFills","executeAllActions","PostOpenSeaSellOrder","OPENSEA_LISTINGS_API_PATH","addresses","addressesByNetwork","SupportedChainId","MAINNET","currentTime","round","Date","now","makerOrder","isOrderAsk","collection","strategy","STRATEGY_STANDARD_SALE","WETH","nonce","startTime","minPercentageToAsk","sub","add","toNumber","params","signMakerOrder","process","REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT","signatureHash","payload","signature","createLooksRareOrder","res","orderItem","parseFloat","isBundle","bundleName","bundleDesc","orderIds","changePrice","isCollection","newX2Y2Order","resp","ListingSection","sectionTitle","caption","title","rows","index","openIndex","isSuccessScreen","useState","isOpen","setIsOpen","notAllApproved","some","row","sellAssets","useSellAsset","state","removeAssetMarketplace","removeRow","getListingRowPrice","listingRow","useEffect","allApproved","flexWrap","className","subhead","marginTop","marginBottom","onClick","color","style","marginRight","clsx","styles","gap","width","paddingTop","Box","fontWeight","badge","images","image","as","height","borderRadius","zIndex","src","alt","marginLeft","textOverflow","overflow","maxWidth","sm","md","bodySmall","formatEthPrice","numberToWei","fontSize","stroke","justifyContent","buttonTextSmall","border","cursor","backgroundColor","e","stopPropagation","callback","ListingModal","useWeb3React","getSigner","listings","useNFTList","setListings","collectionsRequiringApproval","setCollectionsRequiringApproval","setOpenIndex","listingStatus","setListingStatus","allCollectionsApproved","setAllCollectionsApproved","setLooksRareNonce","getLooksRareNonce","toggleCart","useBag","toggleBag","looksRareNonceRef","useRef","isMobile","useIsMobile","subscribe","current","totalEthListingValue","useMemo","getTotalEthValue","every","CONTINUE","signListings","startListingFlow","looksRareNonceFetcher","PAUSED","looksRareAddress","TRANSFER_MANAGER_ERC721","collectionRow","verifyStatus","approveCollectionRow","pauseAllRows","signListingRow","allListingsSigned","paused","logListing","pauseRow","showSuccessScreen","paddingBottom","paddingLeft","paddingRight","headlineSmall","display","fill","themeVars","colors","textPrimary","overflowX","overflowY","maxHeight","subheadSmall","ListingButton","resetRow","resetAllRows","buttonText","showWarningOverride","type"],"mappings":"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","file":"static/js/15.12c74758.chunk.js","sourcesContent":["export const roundAndPluralize = (i: number, word: string) => {\r\n  const rounded = Math.floor(i)\r\n\r\n  return `${rounded} ${word}${rounded === 1 ? '' : 's'}`\r\n}\r\n\r\nexport const pluralize = (number: number) => (number !== 1 ? 's' : '')\r\n","import { defaultAbiCoder } from '@ethersproject/abi'\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { hexZeroPad } from '@ethersproject/bytes'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { keccak256 } from '@ethersproject/keccak256'\r\nimport type { Web3Provider } from '@ethersproject/providers'\r\nimport { randomBytes } from '@ethersproject/random'\r\n\r\nconst dataParamType = `tuple(address token, uint256 tokenId)[]`\r\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\r\nconst orderParamTypes = [\r\n  `uint256`,\r\n  `address`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `address`,\r\n  `bytes`,\r\n  `uint256`,\r\n  `${orderItemParamType}[]`,\r\n]\r\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\r\n\r\nexport type OfferItem = {\r\n  price: BigNumber\r\n  tokens: {\r\n    token: string\r\n    tokenId: BigNumberish\r\n  }[]\r\n}\r\n\r\ntype OrderItem = {\r\n  price: BigNumberish\r\n  data: string\r\n}\r\n\r\ntype Order = {\r\n  salt: BigNumberish\r\n  user: string\r\n  network: BigNumberish\r\n  intent: BigNumberish\r\n  delegateType: BigNumberish\r\n  deadline: BigNumberish\r\n  currency: string\r\n  dataMask: string\r\n  items: OrderItem[]\r\n  // signature\r\n  r: string\r\n  s: string\r\n  v: number\r\n  signVersion: number\r\n}\r\n\r\nexport type OrderPayload = {\r\n  order: string\r\n  isBundle: boolean\r\n  bundleName: string\r\n  bundleDesc: string\r\n  orderIds: number[]\r\n  changePrice: boolean\r\n  isCollection: boolean\r\n}\r\n\r\nexport type OrderResp = {\r\n  success: boolean\r\n  code: number\r\n  error?: string\r\n}\r\n\r\nconst randomSalt = () => {\r\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\r\n  return hexZeroPad(randomHex, 64)\r\n}\r\n\r\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish }[]) => {\r\n  return defaultAbiCoder.encode([dataParamType], [data])\r\n}\r\n\r\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\r\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\r\n    order.salt,\r\n    order.user,\r\n    order.network,\r\n    order.intent,\r\n    order.delegateType,\r\n    order.deadline,\r\n    order.currency,\r\n    order.dataMask,\r\n    order.items.length,\r\n    order.items,\r\n  ])\r\n  const orderHash = keccak256(orderData)\r\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\r\n  order.r = `0x${orderSig.slice(2, 66)}`\r\n  order.s = `0x${orderSig.slice(66, 130)}`\r\n  order.v = parseInt(orderSig.slice(130, 132), 16)\r\n  fixSignature(order)\r\n}\r\n\r\nconst fixSignature = (data: Order) => {\r\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\r\n  // signature malleability if version is 0/1\r\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\r\n  if (data.v < 27) {\r\n    data.v = data.v + 27\r\n  }\r\n}\r\n\r\nexport const encodeOrder = (order: Order): string => {\r\n  return defaultAbiCoder.encode([orderParamType], [order])\r\n}\r\n\r\nexport const createSellOrder = (user: string, deadline: number, items: OfferItem[]): Order => {\r\n  const salt = randomSalt()\r\n  const network = 1 // mainnet\r\n  const intent = 1 // INTENT_SELL\r\n  const delegateType = 1 // DELEGATION_TYPE_ERC721\r\n  const currency = AddressZero // ETH\r\n  return {\r\n    salt,\r\n    user,\r\n    network,\r\n    intent,\r\n    delegateType,\r\n    deadline,\r\n    currency,\r\n    dataMask: '0x',\r\n    items: items.map((item) => ({\r\n      price: item.price,\r\n      data: encodeItemData(item.tokens),\r\n    })),\r\n    r: '',\r\n    s: '',\r\n    v: 0,\r\n    signVersion: 1,\r\n  }\r\n}\r\n","import { Signer } from '@ethersproject/abstract-signer'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { parseEther } from '@ethersproject/units'\r\nimport { addressesByNetwork, MakerOrder, signMakerOrder, SupportedChainId } from '@looksrare/sdk'\r\nimport { Seaport } from '@opensea/seaport-js'\r\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\r\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\r\nimport {\r\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n  OPENSEA_DEFAULT_ZONE,\r\n  OPENSEA_KEY_TO_CONDUIT,\r\n  OPENSEA_LISTINGS_API_PATH,\r\n} from 'nft/queries/openSea'\r\n\r\nimport ERC721 from '../../abis/erc721.json'\r\nimport { createLooksRareOrder, newX2Y2Order, PostOpenSeaSellOrder } from '../queries'\r\nimport { INVERSE_BASIS_POINTS, OPENSEA_DEFAULT_FEE, OPENSEA_FEE_ADDRESS } from '../queries/openSea'\r\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\r\nimport { createSellOrder, encodeOrder, OfferItem, OrderPayload, signOrderData } from './x2y2'\r\n\r\nexport const ListingMarkets: ListingMarket[] = [\r\n  {\r\n    name: 'LooksRare',\r\n    fee: 2.0,\r\n    icon: '/nft/svgs/marketplaces/looksrare.svg',\r\n  },\r\n  {\r\n    name: 'OpenSea',\r\n    fee: 2.5,\r\n    icon: '/nft/svgs/marketplaces/opensea.svg',\r\n  },\r\n  {\r\n    name: 'X2Y2',\r\n    fee: 0.5,\r\n    icon: '/nft/svgs/marketplaces/x2y2.svg',\r\n  },\r\n]\r\n\r\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\r\n  return {\r\n    amount: basisPoints,\r\n    recipient,\r\n  }\r\n}\r\n\r\nconst getConsiderationItems = (\r\n  asset: WalletAsset,\r\n  price: BigNumber,\r\n  signerAddress: string\r\n): {\r\n  sellerFee: ConsiderationInputItem\r\n  openseaFee: ConsiderationInputItem\r\n  creatorFee?: ConsiderationInputItem\r\n} => {\r\n  const openSeaBasisPoints = OPENSEA_DEFAULT_FEE * INVERSE_BASIS_POINTS\r\n  const creatorFeeBasisPoints = asset.creatorPercentage * INVERSE_BASIS_POINTS\r\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - openSeaBasisPoints - creatorFeeBasisPoints\r\n\r\n  const openseaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n  const creatorFee = price\r\n    .mul(BigNumber.from(creatorFeeBasisPoints))\r\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\r\n    .toString()\r\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n\r\n  return {\r\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\r\n    openseaFee: createConsiderationItem(openseaFee, OPENSEA_FEE_ADDRESS),\r\n    creatorFee:\r\n      creatorFeeBasisPoints > 0 ? createConsiderationItem(creatorFee, asset.asset_contract.payout_address) : undefined,\r\n  }\r\n}\r\n\r\nexport async function approveCollection(\r\n  operator: string,\r\n  collectionAddress: string,\r\n  signer: Signer,\r\n  setStatus: (newStatus: ListingStatus) => void\r\n): Promise<void> {\r\n  // This will work for both 721s & 1155s because they both have the\r\n  // setApprovalForAll() method\r\n  const ERC721Contract = new Contract(collectionAddress, ERC721, signer)\r\n  const signerAddress = await signer.getAddress()\r\n  setStatus(ListingStatus.PENDING)\r\n  try {\r\n    const approved = await ERC721Contract.isApprovedForAll(signerAddress, operator)\r\n    if (approved) {\r\n      setStatus(ListingStatus.APPROVED)\r\n      return\r\n    }\r\n\r\n    setStatus(ListingStatus.SIGNING)\r\n    const approvalTransaction = await ERC721Contract.setApprovalForAll(operator, true)\r\n\r\n    setStatus(ListingStatus.PENDING)\r\n    const tx = await approvalTransaction.wait()\r\n\r\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n  } catch (error) {\r\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n    else setStatus(ListingStatus.FAILED)\r\n  }\r\n}\r\n\r\nexport async function signListing(\r\n  marketplace: ListingMarket,\r\n  asset: WalletAsset,\r\n  signer: JsonRpcSigner,\r\n  provider: Web3Provider,\r\n  looksRareNonce = 0,\r\n  setStatus: (newStatus: ListingStatus) => void\r\n): Promise<boolean> {\r\n  const seaport = new Seaport(provider, {\r\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\r\n    overrides: {\r\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n    },\r\n  })\r\n\r\n  const signerAddress = await signer.getAddress()\r\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\r\n  if (!listingPrice || !asset.expirationTime) return false\r\n  switch (marketplace.name) {\r\n    case 'OpenSea':\r\n      try {\r\n        const listingInWei = parseEther(`${listingPrice}`)\r\n        const { sellerFee, openseaFee, creatorFee } = getConsiderationItems(asset, listingInWei, signerAddress)\r\n        const considerationItems = [sellerFee, openseaFee, creatorFee].filter(\r\n          (item): item is ConsiderationInputItem => item !== undefined\r\n        )\r\n\r\n        const { executeAllActions } = await seaport.createOrder(\r\n          {\r\n            offer: [\r\n              {\r\n                itemType: ItemType.ERC721,\r\n                token: asset.asset_contract.address,\r\n                identifier: asset.tokenId,\r\n                amount: '1',\r\n              },\r\n            ],\r\n            consideration: considerationItems,\r\n            endTime: asset.expirationTime.toString(),\r\n            zone: OPENSEA_DEFAULT_ZONE,\r\n            restrictedByZone: true,\r\n            allowPartialFills: true,\r\n          },\r\n          signerAddress\r\n        )\r\n\r\n        const order = await executeAllActions()\r\n        const res = await PostOpenSeaSellOrder(OPENSEA_LISTINGS_API_PATH, order)\r\n        if (res) setStatus(ListingStatus.APPROVED)\r\n        return true\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n    case 'LooksRare':\r\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n      const currentTime = Math.round(Date.now() / 1000)\r\n      const makerOrder: MakerOrder = {\r\n        // true --> ask / false --> bid\r\n        isOrderAsk: true,\r\n        // signer address of the maker order\r\n        signer: signerAddress,\r\n        // collection address\r\n        collection: asset.asset_contract.address,\r\n        // Price in WEI\r\n        price: parseEther(listingPrice.toString()),\r\n        // Token ID\r\n        tokenId: BigNumber.from(asset.tokenId),\r\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        amount: BigNumber.from(1),\r\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\r\n        strategy: addresses.STRATEGY_STANDARD_SALE,\r\n        // currency address\r\n        currency: addresses.WETH,\r\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        nonce: BigNumber.from(looksRareNonce),\r\n        // startTime timestamp in seconds\r\n        startTime: BigNumber.from(currentTime),\r\n        // endTime timestamp in seconds\r\n        endTime: BigNumber.from(asset.expirationTime),\r\n        // minimum ratio to be received by the user (per 10000)\r\n        minPercentageToAsk: BigNumber.from(10000)\r\n          .sub(BigNumber.from(200).add(BigNumber.from(asset.creatorPercentage * 10000)))\r\n          .toNumber(),\r\n        // params (e.g., price, target account for private sale)\r\n        params: [],\r\n      }\r\n\r\n      try {\r\n        const signatureHash = await signMakerOrder(\r\n          signer,\r\n          SupportedChainId.MAINNET,\r\n          makerOrder,\r\n          process.env.REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT || ''\r\n        )\r\n        setStatus(ListingStatus.PENDING)\r\n        const payload = {\r\n          signature: signatureHash,\r\n          tokenId: asset.tokenId,\r\n          collection: asset.asset_contract.address,\r\n          strategy: addresses.STRATEGY_STANDARD_SALE,\r\n          currency: addresses.WETH,\r\n          signer: signerAddress,\r\n          isOrderAsk: true,\r\n          nonce: looksRareNonce,\r\n          amount: 1,\r\n          price: parseEther(listingPrice.toString()).toString(),\r\n          startTime: currentTime,\r\n          endTime: asset.expirationTime,\r\n          minPercentageToAsk: 10000 - (200 + asset.creatorPercentage * 10000),\r\n          params: [],\r\n        }\r\n        const res = await createLooksRareOrder(payload)\r\n        if (res) setStatus(ListingStatus.APPROVED)\r\n        return res\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n\r\n    case 'X2Y2':\r\n      const orderItem: OfferItem = {\r\n        price: parseEther(listingPrice.toString()),\r\n        tokens: [\r\n          {\r\n            token: asset.asset_contract.address,\r\n            tokenId: BigNumber.from(parseFloat(asset.tokenId)),\r\n          },\r\n        ],\r\n      }\r\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem])\r\n      try {\r\n        await signOrderData(provider, order)\r\n        const payload: OrderPayload = {\r\n          order: encodeOrder(order),\r\n          isBundle: false,\r\n          bundleName: '',\r\n          bundleDesc: '',\r\n          orderIds: [],\r\n          changePrice: false,\r\n          isCollection: false,\r\n        }\r\n        setStatus(ListingStatus.PENDING)\r\n        // call server api\r\n        const resp = await newX2Y2Order(payload)\r\n        if (resp) setStatus(ListingStatus.APPROVED)\r\n        return resp\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n\r\n    default:\r\n      return false\r\n  }\r\n}\r\n","import clsx from 'clsx'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\r\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport * as styles from './ListingModal.css'\r\n\r\nexport const ListingSection = ({\r\n  sectionTitle,\r\n  caption = undefined,\r\n  title = undefined,\r\n  rows,\r\n  index,\r\n  openIndex,\r\n  isSuccessScreen = false,\r\n}: {\r\n  sectionTitle: string\r\n  caption?: string\r\n  title?: string\r\n  rows: AssetRow[]\r\n  index: number\r\n  openIndex: number\r\n  isSuccessScreen?: boolean\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n\r\n  const removeRow = (row: any) => {\r\n    // collections\r\n    if (index === 1) {\r\n      for (const asset of sellAssets)\r\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\r\n    }\r\n    // listings\r\n    else removeAssetMarketplace(row.asset, row.marketplace)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsOpen(index === openIndex)\r\n  }, [index, openIndex])\r\n\r\n  function getListingRowPrice(row: AssetRow): number | undefined {\r\n    const listingRow = row as ListingRow\r\n    const newListings = listingRow.asset.newListings\r\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\r\n  }\r\n\r\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\r\n\r\n  return (\r\n    <Row\r\n      flexWrap=\"wrap\"\r\n      className={subhead}\r\n      marginTop=\"10\"\r\n      marginBottom=\"10\"\r\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\r\n      color={allApproved ? 'green' : 'textPrimary'}\r\n    >\r\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\r\n      {sectionTitle}\r\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\r\n      {(isOpen || isSuccessScreen) && (\r\n        <Column\r\n          gap=\"12\"\r\n          width=\"full\"\r\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\r\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\r\n        >\r\n          {caption && (\r\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\r\n              {caption}\r\n            </Box>\r\n          )}\r\n          {title && (\r\n            <Box color=\"textSecondary\" className={badge}>\r\n              {title}\r\n            </Box>\r\n          )}\r\n          <Column gap=\"8\">\r\n            {rows.map((row: AssetRow, index) => {\r\n              return (\r\n                <Column key={index} gap=\"8\">\r\n                  <Row>\r\n                    {row.images.map((image, index) => {\r\n                      return (\r\n                        <Box\r\n                          as=\"img\"\r\n                          height=\"20\"\r\n                          width=\"20\"\r\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\r\n                          style={{ zIndex: 2 - index }}\r\n                          className={styles.listingModalIcon}\r\n                          src={image}\r\n                          alt={row.name}\r\n                          key={index}\r\n                        />\r\n                      )\r\n                    })}\r\n                    <Box\r\n                      marginLeft=\"8\"\r\n                      marginRight=\"auto\"\r\n                      fontWeight=\"normal\"\r\n                      color=\"textPrimary\"\r\n                      textOverflow=\"ellipsis\"\r\n                      overflow=\"hidden\"\r\n                      maxWidth={{\r\n                        sm: 'max',\r\n                        md:\r\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\r\n                      }}\r\n                      className={bodySmall}\r\n                    >\r\n                      {row.name}\r\n                    </Box>\r\n                    {isSuccessScreen ? (\r\n                      getListingRowPrice(row) &&\r\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\r\n                    ) : row.status === ListingStatus.APPROVED ? (\r\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\r\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\r\n                      <Row gap=\"4\">\r\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\r\n                          {row.status}\r\n                        </Box>\r\n                        <FailedListingIcon />\r\n                      </Row>\r\n                    ) : (\r\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\r\n                    )}\r\n                  </Row>\r\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\r\n                    <Row gap=\"8\" justifyContent=\"center\">\r\n                      <Box\r\n                        width=\"120\"\r\n                        as=\"button\"\r\n                        className={buttonTextSmall}\r\n                        borderRadius=\"12\"\r\n                        border=\"none\"\r\n                        color=\"red400\"\r\n                        height=\"32\"\r\n                        cursor=\"pointer\"\r\n                        style={{ backgroundColor: '#FA2B391A' }}\r\n                        onClick={async (e) => {\r\n                          e.stopPropagation()\r\n                          removeRow(row)\r\n                        }}\r\n                      >\r\n                        Remove\r\n                      </Box>\r\n                      <Box\r\n                        width=\"120\"\r\n                        as=\"button\"\r\n                        className={buttonTextSmall}\r\n                        borderRadius=\"12\"\r\n                        border=\"none\"\r\n                        color=\"genieBlue\"\r\n                        height=\"32\"\r\n                        cursor=\"pointer\"\r\n                        style={{ backgroundColor: '#4C82FB29' }}\r\n                        onClick={async (e) => {\r\n                          e.stopPropagation()\r\n                          if (row.callback) {\r\n                            await row.callback()\r\n                          }\r\n                        }}\r\n                      >\r\n                        Try again\r\n                      </Box>\r\n                    </Row>\r\n                  )}\r\n                </Column>\r\n              )\r\n            })}\r\n          </Column>\r\n        </Column>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n","import { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\r\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\r\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { pluralize } from 'nft/utils/roundAndPluralize'\r\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\r\n\r\nimport { ListingButton } from './ListingButton'\r\nimport * as styles from './ListingModal.css'\r\nimport { ListingSection } from './ListingSection'\r\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\r\n\r\nconst ListingModal = () => {\r\n  const { provider } = useWeb3React()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const signer = provider?.getSigner()\r\n  const listings = useNFTList((state) => state.listings)\r\n  const setListings = useNFTList((state) => state.setListings)\r\n  const collectionsRequiringApproval = useNFTList((state) => state.collectionsRequiringApproval)\r\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\r\n  const [openIndex, setOpenIndex] = useState(0)\r\n  const listingStatus = useNFTList((state) => state.listingStatus)\r\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\r\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\r\n  const looksRareNonce = useNFTList((state) => state.looksRareNonce)\r\n  const setLooksRareNonce = useNFTList((state) => state.setLooksRareNonce)\r\n  const getLooksRareNonce = useNFTList((state) => state.getLooksRareNonce)\r\n  const toggleCart = useBag((state) => state.toggleBag)\r\n  const looksRareNonceRef = useRef(looksRareNonce)\r\n  const isMobile = useIsMobile()\r\n\r\n  useEffect(() => {\r\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\r\n  }, [])\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n\r\n  // when all collections have been approved, auto start the signing process\r\n  useEffect(() => {\r\n    collectionsRequiringApproval?.length &&\r\n      setAllCollectionsApproved(\r\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\r\n      )\r\n    if (\r\n      allCollectionsApproved &&\r\n      (listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.CONTINUE)\r\n    ) {\r\n      signListings()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [collectionsRequiringApproval, allCollectionsApproved])\r\n\r\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\r\n\r\n  const startListingFlow = async () => {\r\n    if (!signer) return\r\n    setListingStatus(ListingStatus.SIGNING)\r\n    const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n    const signerAddress = await signer.getAddress()\r\n    const nonce = await looksRareNonceFetcher(signerAddress)\r\n    setLooksRareNonce(nonce ?? 0)\r\n\r\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\r\n      setListingStatus(ListingStatus.SIGNING)\r\n      setOpenIndex(1)\r\n    }\r\n    const looksRareAddress = addresses.TRANSFER_MANAGER_ERC721\r\n    // for all unqiue collection, marketplace combos -> approve collections\r\n    for (const collectionRow of collectionsRequiringApproval) {\r\n      verifyStatus(collectionRow.status) &&\r\n        approveCollectionRow(\r\n          collectionRow,\r\n          collectionsRequiringApproval,\r\n          setCollectionsRequiringApproval,\r\n          signer,\r\n          looksRareAddress,\r\n          pauseAllRows\r\n        )\r\n    }\r\n  }\r\n\r\n  const signListings = async () => {\r\n    if (!signer || !provider) return\r\n    setListingStatus(ListingStatus.SIGNING)\r\n    setOpenIndex(2)\r\n    // sign listings\r\n    for (const listing of listings) {\r\n      verifyStatus(listing.status) &&\r\n        (await signListingRow(\r\n          listing,\r\n          listings,\r\n          setListings,\r\n          signer,\r\n          provider,\r\n          getLooksRareNonce,\r\n          setLooksRareNonce,\r\n          pauseAllRows\r\n        ))\r\n    }\r\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\r\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\r\n    if (allListingsSigned) {\r\n      setOpenIndex(0)\r\n      setListingStatus(ListingStatus.APPROVED)\r\n    } else if (!paused) {\r\n      setListingStatus(ListingStatus.FAILED)\r\n    }\r\n    await logListing(listings, (await signer?.getAddress()) ?? '')\r\n  }\r\n\r\n  const pauseAllRows = () => {\r\n    for (const collection of collectionsRequiringApproval) {\r\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\r\n    }\r\n    for (const listing of listings) {\r\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\r\n    }\r\n  }\r\n\r\n  const resetAllRows = () => {\r\n    for (const collection of collectionsRequiringApproval) {\r\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\r\n    }\r\n    for (const listing of listings) {\r\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\r\n    }\r\n  }\r\n\r\n  const clickStopListing = () => {\r\n    pauseAllRows()\r\n  }\r\n\r\n  const clickStartListingFlow = () => {\r\n    resetAllRows()\r\n    allCollectionsApproved ? signListings() : startListingFlow()\r\n  }\r\n\r\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\r\n\r\n  return (\r\n    <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\r\n      <Row className={headlineSmall} marginBottom=\"10\">\r\n        {isMobile && !showSuccessScreen && (\r\n          <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\r\n            <ChevronLeftIcon height={28} width={28} />\r\n          </Box>\r\n        )}\r\n        {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\r\n        <Box\r\n          as=\"button\"\r\n          border=\"none\"\r\n          color=\"textSecondary\"\r\n          backgroundColor=\"backgroundSurface\"\r\n          marginLeft=\"auto\"\r\n          marginRight=\"0\"\r\n          paddingRight=\"0\"\r\n          display={{ sm: 'flex', md: 'none' }}\r\n          cursor=\"pointer\"\r\n          onClick={toggleCart}\r\n        >\r\n          <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\r\n        </Box>\r\n      </Row>\r\n      <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\r\n        {showSuccessScreen ? (\r\n          <ListingSection\r\n            sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\r\n            rows={listings}\r\n            index={0}\r\n            openIndex={openIndex}\r\n            isSuccessScreen={true}\r\n          />\r\n        ) : (\r\n          <>\r\n            <ListingSection\r\n              sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\r\n                collectionsRequiringApproval.length\r\n              )}`}\r\n              title=\"COLLECTIONS\"\r\n              rows={collectionsRequiringApproval}\r\n              index={1}\r\n              openIndex={openIndex}\r\n            />\r\n            <ListingSection\r\n              sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\r\n              caption=\"Now you can sign to list each item\"\r\n              title=\"NFTS\"\r\n              rows={listings}\r\n              index={2}\r\n              openIndex={openIndex}\r\n            />\r\n          </>\r\n        )}\r\n      </Column>\r\n      <hr className={styles.sectionDivider} />\r\n      <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\r\n        Return if sold\r\n        <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\r\n          {totalEthListingValue}\r\n          &nbsp;ETH\r\n        </Row>\r\n      </Row>\r\n      {showSuccessScreen ? (\r\n        <Box as=\"span\" className={caption} color=\"textSecondary\">\r\n          Status:{' '}\r\n          <Box as=\"span\" color=\"green200\">\r\n            Confirmed\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <ListingButton onClick={clickStartListingFlow} buttonText={'Start listing'} showWarningOverride={isMobile} />\r\n      )}\r\n      {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\r\n        <Box\r\n          as=\"button\"\r\n          border=\"none\"\r\n          backgroundColor=\"backgroundSurface\"\r\n          cursor=\"pointer\"\r\n          color=\"orange\"\r\n          className={styles.button}\r\n          onClick={clickStopListing}\r\n          type=\"button\"\r\n        >\r\n          Stop listing\r\n        </Box>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n\r\nexport default ListingModal\r\n"],"sourceRoot":""}